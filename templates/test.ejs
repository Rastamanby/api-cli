process.env.NODE_ENV = 'test';

const mongoose = require('mongoose');
const <%= name %> = require('../controllers/models/<%= name.toLowerCase() %>')

const chai = require('chai');
const chaiHttp = require('chai-http');
const server = require('../index');
const should = require('chai').should
const expect = require('chai').expect
const assert = require('chai').assert

chai.use(chaiHttp);

describe('<%= name %>s', () => {
  beforeEach((done) => {
      <%= name %>.remove({}, (err) => { 
         done();         
      });     
  });
  <% if (methods.GET) { %>
  describe('/GET <%= name.toLowerCase() %>', () => {
      it('it should GET all the <%= name.toLowerCase() %>s', (done) => {
        chai.request(server)
            .get('/<%= name.toLowerCase() %>')
            .end((err, res) => {
                // assert.isObject(res)
                // assert.nestedProperty(res, 'status')
                // assert.nestedPropertyVal(res, 'status', 200)
                // assert.nestedProperty(res, 'body')
                // assert.isArray(res.body)
                // assert.lengthOf(res.body, 0)
              done();
            });
      });
  });
  <% } %>
  <% if (methods.POST) { %>
  describe('/POST <%= name.toLowerCase() %>', () => {
    it('it should return error with no required data', (done) => {
      const <%= name.toLowerCase() %> = {
        // example of data
      }
      chai.request(server)
        .post('/<%= name.toLowerCase() %>')
        .send(<%= name.toLowerCase() %>)
        .end((err, res) => {
          // assert fields
          // assert.isObject(res)
          // assert.nestedProperty(res, 'body.errors.sku.kind')
          // assert.nestedPropertyVal(res, 'body.errors.sku.kind', 'required')
          done();
        });
    });
    it('it should succesful add <%= name.toLowerCase() %> and return message', (done) => {
      const <%= name.toLowerCase() %> = {
        // example of data
      }
      chai.request(server)
        .post('/<%= name.toLowerCase() %>')
        .send(<%= name.toLowerCase() %>)
        .end((err, res) => {
          // example of succesful post
          // assert.isObject(res)
          // assert.nestedProperty(res, 'body.message')
          // assert.nestedPropertyVal(res, 'body.message', '<%= name %> successfully added!')
          done()
        })
    })
  })
  <% } %>
  <% if (methods.PUT) { %>
  describe('/PUT <%= name.toLowerCase() %>', () => {
    it('it should succesfully update sort of <%= name.toLowerCase() %>', (done) => {
      const <%= name.toLowerCase() %> = new <%= name %>({
        // exmaple of data
      })
      <%= name.toLowerCase() %>.save((err, <%= name.toLowerCase() %>) => {
        chai.request(server)
          .put(`/<%= name.toLowerCase() %>/${<%= name.toLowerCase() %>.id}`)
          .send({
            // example of data
          })
          .end((err, res) => {
            // assert fields data
            // assert.nestedProperty(res, 'status')
            // assert.nestedPropertyVal(res, 'status', 200)
            // assert.nestedProperty(res, 'body')
            // assert.isObject(res.body)
            // assert.nestedPropertyVal(res, 'body.message', '<%= name %> updated!')
            // assert.nestedPropertyVal(res, 'body.<%= name.toLowerCase() %>.sort', 0)
            done()
          })
      })
    })
  })
  <% } %>
})